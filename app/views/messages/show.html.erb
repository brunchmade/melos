<link rel="stylesheet" type="text/css" class="js-palette" href="<%= @now_playing.palette_url %>">

<div class="nowPlayingBackground js-nowPlayingBackground" style="background-image: url(<%= @now_playing.blurred_album_art_url %>)"></div>

<div class="flex-auto flex justify-center items-center">
  <div class="nowPlaying center">
    <a class="nowPlayingPermalink" href="<%= @now_playing.responses['permalink_url'] %>" target="_blank">
      <div class="atvImg nowPlayingAlbumArt">
        <div class="atvImg-layer" data-img="<%= @now_playing.album_art_url %>"></div>
      </div>
    </a>
    <div class="progressBar js-bgcheck background">
      <div class="progress album-bg-1" style="width: 0"></div>
    </div>
    <div class="flex justify-between opacity" style=";margin-top:.25rem">
      <div class="h6 current-time js-bgcheck text">&nbsp;</div>
      <div class="h6 duration-time js-bgcheck text">&nbsp;</div>
    </div>
    <span class="js-bgcheck text">
      <h1><a class="nowPlayingPermalink" href="<%= @now_playing.responses['permalink_url'] %>" target="_blank"><%= @now_playing.responses['title'] %></a></h1>
      <h2 class="opacity"><%= @now_playing.responses['user']['username'] %> &ndash; Added by NAME</h2>
    </span>
    <div class="actions flex items-center justify-center">
      <a class="js-bgcheck svg btn btnLike stroke"><!-- remove 'stroke' and add 'liked' if this song is a favorite (query the api and respond to click)-->
        <svg width="31" height="28" viewBox="0 0 31 28" xmlns="http://www.w3.org/2000/svg"><path d="M14.886 5.847C13.82 3.577 11.473 2 8.75 2 5.022 2 2 4.955 2 8.6c0 .14.004.28.013.417A8.45 8.45 0 0 0 2 9.5C2 15.712 14.51 26 15.5 26 15.677 26 29 16.033 29 9.5c0-.152-.006-.297-.016-.435.01-.154.016-.31.016-.465C29 4.955 25.978 2 22.25 2c-2.723 0-5.07 1.576-6.136 3.847V5.6h-1.228v.247z" stroke="#000" stroke-width="1.5" fill="none" fill-rule="evenodd"/></svg>
      </a>
      <a class="js-bgcheck svg btn btnPlayPause">
        <svg viewBox="0 0 36 36" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <defs>
             <path id="ytp-12" d="M 11 10 L 17 10 L 17 26 L 11 26 M 20 10 L 26 10 L 26 26 L 20 26">
                <animate id="animation" begin="indefinite" attributeType="XML" attributeName="d" fill="freeze" from="M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26" to="M11,10 L18,13.74 18,22.28 11,26 M18,13.74 L26,18 26,18 18,22.28" dur="0.1s" keySplines=".4 0 1 1"
                repeatCount="1"></animate>
             </path>
          </defs>
          <use xlink:href="#ytp-12" class="ytp-svg-fill"></use>
       </svg>
      </a>
      <span class="js-bgcheck svg btn btnFf">
        <svg width="41" height="27" viewBox="0 0 41 27" xmlns="http://www.w3.org/2000/svg"><path d="M20.492 13.707c-.062.23-.226.447-.49.624L1.25 26.795c-.693.46-1.25.16-1.25-.668V.874C0 .046.56-.253 1.25.206L20 12.67c.267.176.43.395.492.623V.873c0-.827.56-1.126 1.25-.667l18.75 12.463c.693.46.69 1.202 0 1.66l-18.75 12.464c-.693.46-1.25.16-1.25-.668v-12.42z" fill="#000" fill-rule="evenodd"/></svg>
      </span>
    </div>
  </div>
</div>
<div class="hide"><audio src="/0.mp3" class="player hide"></audio></div>

<div class="sidebarContainer">
  <div class="onDeck">
    <div class="flex hide">
      <div class="album-bg-1 flex-auto" style="height:5px;"></div>
      <div class="album-bg-2 flex-auto" style="height:5px;"></div>
      <div class="album-bg-3 flex-auto" style="height:5px;"></div>
      <div class="album-bg-4 flex-auto" style="height:5px;"></div>
    </div>
    <div class="m2">
      <%= render 'comments/new', message: @message %>
    </div>

    <div class="m2 flex justify-between">
      <div class="h6 opacity" style="font-weight:700;text-transform:uppercase">Online now (<span class="js-membersOnline">0</span>)</div>
      <% if current_user %>
        <div class="h6 opacity dropdownTrigger" style="font-weight:700"><%= current_user.full_name %> ▾</div>
        <ul class="dropdownMenu list-reset hide">
          <li onclick="openModal('.userSettings');">Settings</li>
          <li><%= link_to "Log out", session_path, method: :delete %></li>
          <% if current_user.boss %>
            <li class="divider"></li>
            <li><%= link_to "Reload All Users", controller: 'messages', action: 'reload_all', remote: true  %></li>
          <% end %>
        </ul>
      <% end %>
    </div>
    <div class="usersInRoomWrapper">
      <div class="usersInRoom pl2">
      </div>
    </div>

    <div class="m2 flex justify-between">
      <div class="h6 opacity" style="font-weight:700;text-transform:uppercase">
        On Deck (<span class="js-songsOnDeck"><%= @message.queue_count %></span>)
      </div>
      <div class="h6 opacity dropdownTrigger" style="font-weight:700"><%= @message.title %> ▾</div>
      <ul class="dropdownMenu list-reset hide">
        <li onclick="openModal('.roomStats');">Room stats</li>
        <li><%= link_to "Add 10 popular tracks", controller: 'messages', action: 'backfill', remote: true  %></li>
        <li class="divider"></li>
        <li onclick="openModal('.switchRooms');">Switch rooms</li>
        <li onclick="openModal('.createNewRoom');">Create a new room</li>
      </ul>
    </div>
    <ul class="list-reset m0 onDeckSongs px2">
      <% @comments.each do |comment| %>
        <% @comment = comment %>
        <%= render 'comments/comment', comment: @comment %>
      <% end %>
    </ul>
    <div class="toastNotification">Song added to queue</div>
  </div>
</div>

<div class="toggleSidebar">◂</div>

<div class="betaNotesTrigger js-bgcheck text" onclick="openModal('.betaNotes');">Beta notes</div>



<div class="js-nowPlayingBackground modalBg isHidden" style="background-image: url(<%= @now_playing.blurred_album_art_url %>)">

  <div class="switchRooms modalWindow p3 isHidden">
    <!-- Not quite ready for search yet
    <div class="h6 opacity" style="font-weight:700;text-transform:uppercase">Switch Rooms</div>
    <input type="text" name="new-room" placeholder="Room name" class="my2">
    <div class="right-align">
      <button class="mr1" onclick="closeModal('.switchRooms');">Cancel</button> <button>OK</button>
    </div>
    -->
    <div class="h6 opacity" style="font-weight:700;text-transform:uppercase">Trending Rooms</div>
    <ul class="list-reset h5">
      <% @messages.each do |message| %>
        <li><%= link_to message.title, message %></li>
      <% end %>
    </ul>
  </div>

  <div class="createNewRoom modalWindow p3 isHidden">
    <div class="h6 opacity" style="font-weight:700;text-transform:uppercase">Create a new room</div>
    <%= form_for Message.new do |f| %>
    <%= f.text_field :title, class: 'my2', placeholder: 'Room name' %>
    <div class="right">
      <button class="mr1" onclick="closeModal('.createNewRoom');">Cancel</button>
      <%= button_tag "Create Room" %>
    </div>
    <% end %>
  </div>

  <div class="userSettings modalWindow p3 isHidden">
    <div class="h6 opacity" style="font-weight:700;text-transform:uppercase">Settings</div>
    <input class="mt2" type="text" name="name" placeholder="Full Name">
    <input class="mt2" type="text" name="name" placeholder="Username">
    <input class="mt2" type="email" name="name" placeholder="Email Address">
    <input class="mt2" type="password" name="name" placeholder="New Password">
    <input class="my2" type="password" name="name" placeholder="Confirm New Password">
    <div class="right">
      <button class="mr1" onclick="closeModal('.userSettings');">Cancel</button> <button>Save</button>
    </div>
  </div>

  <div class="roomStats modalWindow p3 isHidden">
    <div class="h6 opacity" style="font-weight:700;text-transform:uppercase">Room Stats for <%= @message.title %></div>

    <table class="my3">
      <tr>
        <td>Songs played</td><td><%= @message.played_tracks.count %></td>
      </tr>
      <tr>
        <td>Most users in room</td><td>A lot</td>
      </tr>
      <tr>
        <td>Hours of music queued up</td><td><%= @message.total_played_hours %></td>
      </tr>
      <tr>
        <td>Longest streak</td><td>Like, days</td>
      </tr>
      <tr>
        <td>MVDJ</td><td><%= @message.mvdj.full_name %></td>
      </tr>
    </table>

    <div class="right">
      <button onclick="closeModal('.roomStats');">Close</button>
    </div>
  </div>

  <div class="betaNotes modalWindow p3 isHidden">
    <div class="h6 opacity" style="font-weight:700;text-transform:uppercase">Welcome to the Pinwheel beta!</div>

    <p>Thanks so much for giving Pinwheel a try! If you have any feedback about the app, feel free to tweet <a href="https://twitter.com/wr" target="_blank">@wr</a> and/or <a href="https://twitter.com/alexbaldwin" target="_blank">@alexbaldwin</a>. We'd really appreciate it :)</p>

    <p>Right now this app just has some basic functionality. Currently you can:</p>

    <ul>
      <li>Join the Simple Casual room – it's currently the <u>only</u> room :)</li>
      <li>Add tracks (any SoundCloud track URL should work). Note that songs set as "not streamable" by the uploader currently "play" in Pinwheel, but with no audio. We're going to fix that soon.</li>
      <li>Add SoundCloud playlists (any SoundCloud playlist URL should work).</li>
      <li>Play / Pause (since it's a collaborative radio app, "pause" really just means mute. The song will continue to play for everyone else).</li>
      <li>Skip – this will skip the track for everyone in the room.</li>
      <li>Remove songs from the queue – this removes the track for everyone.</li>
      <li>"Add 10 popular tracks" from the room name menu ("Simple Casual"). This will randomly pick 10 of the Top 100 songs on SoundCloud.</li>
      <li>Share the app with friends! Just send them to <a href="https://pinwheel.fm" target="_blank">pinwheel.fm</a> to download the app.
    </ul>

    <p>Some currently-visible functionality that doesn't work:</p>

    <ul>
      <li>Favoriting a track does not work</li>
      <li>User settings</li>
      <li>Create new room</li>
      <li>Switch rooms</li>
      <li>Room stats</li>
      <li>Searching for a track</li>
    </ul>

    <p>Some stuff we're thinking about adding (please let us know what you think!):</p>

    <ul>
      <li>Favoriting a track will add a similar track to the queue</li>
      <li>Adding YouTube songs</li>
      <li>Adding YouTube videos</li>
      <li>Adding Spotify songs (currently unsupported by their API, but maybe soon!)</li>
      <li>DJbot – automatically adds similar tracks to keep the vibe going</li>
    </ul>

    <div class="right">
      <button onclick="closeModal('.betaNotes');">Close</button>
    </div>
  </div>

</div>

<script>

  // Intialize the tvOS style album art
  atvImg();

  // Update the <title> with the song playing on page load
  document.title = "<%= @now_playing.responses['title'] %> - <%= @now_playing.responses['user']['username'] %>";

  // Initialize the background light/dark detection
  BackgroundCheck.init({
    targets: '.js-bgcheck',
    images: '.js-nowPlayingBackground'
  });

  // Intialize the audio player
  var player;
  player = new MediaElementPlayer('audio', {features: [], alwaysShowControls: false, enableKeyboard: true});
  player.setSrc("<%= @now_playing.responses['stream_url'] %>?client_id=<%= ENV['SOUNDCLOUD_ID'] %>");
  player.load();

  // Grab the @now_playing track and play it at the
  // current shared timecode.
  player.setCurrentTime(<%= @now_playing.aired_at ? (Time.now.utc - @now_playing.aired_at).to_i : 0 %>);
  player.play();

  // Progress bar for player
  player.media.addEventListener('timeupdate', function(e) {
    $('.progress').css("width", String((player.media.currentTime / player.media.duration) * 100) + '%');
  }, false);

  // Initialize Pusher
  var pusher = new Pusher('<%= ENV['PUSHER_KEY'] %>', {
    encrypted: true,
    authEndpoint: '<%= auth_pusher_index_path %>',
    channel_name: '1',
    auth: {
      headers: {
        'X-CSRF-Token': "<%= form_authenticity_token %>"
      }
    }
  });

  // Countup timer for player
  player.media.addEventListener("timeupdate", function() {
    var timeline = $('.current-time');
    var s = parseInt(player.media.currentTime % 60);
    var m = parseInt((player.media.currentTime / 60) % 60);
    var h = parseInt((player.media.currentTime / 3600) % 60);

    s = s < 10 ? "0"+s : s;

    timeline.text(m+':'+s);

    if(h > 0) {
      m = m < 10 ? "0"+m : m;
      timeline.text(h+':'+m+':'+s);
    }
  }, false);

  // Countdown timer for player
  player.media.addEventListener("timeupdate", function() {
    var timeleft = $('.duration-time'),
      duration = parseInt( player.media.duration ),
      currentTime = parseInt( player.media.currentTime ),
      timeLeft = duration - currentTime,
      s, m, h;

    s = timeLeft % 60;
    m = Math.floor( timeLeft / 60 ) % 60;
    h = Math.floor( timeLeft / 3600) % 60;

    s = s < 10 ? "0"+s : s;

    timeleft.text('-'+m+":"+s);

    if(h > 0) {
      m = m < 10 ? "0"+m : m;
      timeleft.text('-'+h+':'+m+':'+s);
    }

  }, false);

  var channel = pusher.subscribe('message_<%= @message.id %>');

  // Initialize and listen for new tracks
  channel.bind('on_deck', function(data) {
    if(true) { // if track is streamable
      $(data.message)
        .css({ display: 'none', opacity: 0 })
        .appendTo($('.onDeckSongs'))
        .slideDown(340).animate({ opacity: 1 },{ queue: false, duration: 340 });
      toastNotification('Song added to queue', 'good');
      $('.js-songsOnDeck').text(data.count);
    }
    //  else if { // if track is not streamable
    //   toastNotification('Song is not streamable ', 'bad');
    // } else {
    //   toastNotification('Invalid SoundCloud URL', 'bad');
    // }
  });

  // Initialize and listen for tracks deleted from the queue
  channel.bind('remove_on_deck', function(data) {
    $('*[data-comment-id=' + data.id + ']')
      .slideUp(340, function() { $(this).remove(); })
      .animate({ opacity: 0 },{ queue: false, duration: 340 });
    $('.js-songsOnDeck').text(data.count);
    toastNotification('Song removed from queue', 'good');
    $('.js-songsOnDeck').text(data.count);
  });

  // Initialize and listen for new tracks playing
  channel.bind('now_playing', function(data) {
    // Replace current playing info
    $('.js-songsOnDeck').text(data.count);
    $('.onDeckSongs li:first-child')
      .slideUp(340, function() {$(this).remove(); })
      .animate({ opacity: 0 },{ queue: false, duration: 340 });
    $('.nowPlaying h1 a').text(data.title);
    $('.nowPlayingPermalink').attr('href', data.permalink_url);
    $('.nowPlaying h2').text(data.artist);
    $('.atvImg-rendered-layer').css('background-image', 'url(' + data.artwork_url + ')');
    $('.js-nowPlayingBackground').css('background-image', 'url(' + data.background_url  + ')');
    $('.js-palette').attr('href', data.palette_url);
    document.title = data.title + " - " + data.artist;

    // Drop that track
    player.pause();
    player.setSrc(data.stream_url);
    player.load();
    player.play();

    // Re-analyze the background image for the light/dark detection
    BackgroundCheck.init({
      targets: '.js-bgcheck',
      images: '.js-nowPlayingBackground'
    });
    BackgroundCheck.refresh();

  });

  // Initialize and listen for users currently in the room
  var presenceChannel = pusher.subscribe('presence-<%= @message.id %>');
  presenceChannel.bind('pusher:subscription_succeeded', function(members) {
    $('.usersInRoom').empty();
    members.each(function(member) {
      $('.usersInRoom').append('<img src="' + member.info['avatar_url'] + '" data-member-id="' + member.id + '" title="' + member.info['name'] + '">');
    });
    $('.js-membersOnline').text(presenceChannel.members.count);
  });

  // Listen for users entering the room
  presenceChannel.bind('pusher:member_added', function(member) {
    $('.usersInRoom').append('<span class="tooltip" data-title="' + member.info['name'] + '"><img src="' + member.info['avatar_url'] + '" data-member-id="' + member.id + '" title="' + member.info['name'] + '"></span>');
    $('.js-membersOnline').text(presenceChannel.members.count);
  });

  // Listen for users leaving the room
  presenceChannel.bind('pusher:member_removed', function(member) {
    $('*[data-member-id=' + member.id + ']').fadeOut();
    $('.js-membersOnline').text(presenceChannel.members.count);
  });

  // Initialize and listen for app updates
  var reloadSession = pusher.subscribe('reloadAllSessions');
  reloadSession.bind('reload_all', function() {
    location.reload();
  });

  // muteOrUnmute();
  // Controls the play+pause function by muting
  // or unmuting the current track.
  var flip = true;
  function muteOrUnmute() {
    if($("audio").prop('muted')) {
      // If the track is Paused (instead of muted) for
      // some reason, resume playing
      if (player.media.paused) {
        player.play();
      }
      $("audio").prop('muted', false); //mute
    } else {
      $("audio").prop('muted', true); //mute
    }

    // Play+pause button SVG animation
    pause = "M11,10 L18,13.74 18,22.28 11,26 M18,13.74 L26,18 26,18 18,22.28",
    play = "M11,10 L17,10 17,26 11,26 M20,10 L26,10 26,26 20,26",
    $animation = $('#animation');
    flip = !flip;
    $animation.attr({
      "from": flip ? pause : play,
      "to": flip ? play : pause
    }).get(0).beginElement();
  }

  // When the user clicks the ".btnPlayPause" button
  $('.btnPlayPause').click(function() {
    muteOrUnmute();
  });

  // nextTrack();
  // Skips to the next track for all users in the room.
  function nextTrack() {
    $.ajax({url: "/messages/<%= @message.id %>/next"});
  }

  // When the user clicks the ".btnFf" button
  $('.btnFf').click(function() {
    nextTrack();
  });

  // openModal();
  // Opens a modal window
  function openModal(name) {
    $(name).parent().removeClass('isHidden');
    $(name).removeClass('isHidden');
  }

  // closeModal();
  // Closes a modal window
  function closeModal(name) {
    $(name).addClass('isHidden up');
    $(name).parent().addClass('isHidden');
    setTimeout(function () {
      $(name).removeClass('up');
    }, 400);
  }

  // toastNotification("Message", "type");
  // Pops up an arbitrary status message and closes
  // it after 4 seconds.
  // `type` can be : "good", "bad"
  // Both arguments are required.
  var toastOpen = false;
  var toastInOut;
  function toastNotification(message, type) {
    if(toastInOut) {
      clearTimeout(toastInOut);
      toastInOut = null;
    }
    if(toastOpen) {
      $('.toastNotification').html(message).addClass(type);
    } else {
      $('.toastNotification').html(message).addClass(type);
      setTimeout(function () {
        $('.toastNotification').removeClass(type);
      }, 4000);
    }
    toastOpen = !toastOpen;
  }

  // toggleSidebar();
  // Show and hide the main app sidebar
  function toggleSidebar() {
    $('.sidebarContainer').toggleClass('isHidden');
    $('.toggleSidebar').toggleClass('closed');
  }
  // when the user clicks the ".toggleSidebar" icon
  $('.toggleSidebar').click(function() {
    toggleSidebar();
  });

  // If a dropdown menu is open, and the user clicks
  // anywhere except the dropdown trigger, close the dropdown.
  $(document).click(function(){
    if(!$(event.target).is('.expanded')) {
      $('.dropdownMenu').addClass('hide').prev().removeClass('expanded');
    }
  });

  // If the user clicks the dropdown trigger, show the dropdown
  // and close any other open ones.
  $('.dropdownTrigger, .dropdownMenu').click(function() {
    $('.dropdownMenu').addClass('hide');
    $(this).addClass('expanded').next('.dropdownMenu').removeClass('hide');
  });

  // When the user submits a new track url, it will clear the input
  $('#new_comment').bind('ajax:complete', function(event,xhr,status){
    $('#comment_content').val('');
  });

</script>
